<?php
declare(strict_types=1);

namespace Plaisio\Console\Test\Command;

use PHPUnit\Framework\TestCase;
use Plaisio\Console\Application\PlaisioApplication;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Tester\ApplicationTester;

/**
 * Testcases for class KernelPropertiesCommand, KernelPropertyReadWriteCommand, and
 *
 *
 */
class KernelPropertiesCommandTest extends TestCase
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Preserves vendor/plaisio/kernel/plaisio-kernel.xml.
   */
  public function setUp(): void
  {
    if (!file_exists('vendor/plaisio/kernel/plaisio-kernel.xml.org'))
    {
      copy('vendor/plaisio/kernel/plaisio-kernel.xml', 'vendor/plaisio/kernel/plaisio-kernel.xml.org');
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Restores vendor/plaisio/kernel/plaisio-kernel.xml.
   */
  public function tearDown(): void
  {
    if (file_exists('vendor/plaisio/kernel/plaisio-kernel.xml.org'))
    {
      rename('vendor/plaisio/kernel/plaisio-kernel.xml.org', 'vendor/plaisio/kernel/plaisio-kernel.xml');
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test adding a property to the kernel.
   */
  public function test01(): void
  {
    $application = new PlaisioApplication();
    $application->setAutoExit(false);
    $tester = new ApplicationTester($application);
    $tester->run(['command' => 'plaisio:kernel-properties'],
                 ['verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE]);

    $output = $tester->getDisplay();
    self::assertSame(0, $tester->getStatusCode(), $output);
    self::assertStringContainsString('Adding property $DL', $output);
    self::assertStringContainsString('Adding property $awesome', $output);

    $kernel = file_get_contents('vendor/plaisio/kernel/src/PlaisioKernel.php');
    self::assertStringContainsString('* @property-read \NoSuchVendor\Awesome $awesome An awesome property.', $kernel);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test making property writable.
   */
  public function test02(): void
  {
    $application = new PlaisioApplication();
    $application->setAutoExit(false);
    $tester = new ApplicationTester($application);
    $tester->run(['command' => 'plaisio:kernel-property-read-write',
                  'name'    => 'awesome'],
                 ['verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE]);

    $output = $tester->getDisplay();
    self::assertSame(0, $tester->getStatusCode(), $output);

    $kernel = file_get_contents('vendor/plaisio/kernel/src/PlaisioKernel.php');
    self::assertStringContainsString('* @property      \NoSuchVendor\Awesome $awesome An awesome property.', $kernel);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test set datalayer class using an argument.
   */
  public function test03(): void
  {
    $application = new PlaisioApplication();
    $application->setAutoExit(false);
    $tester = new ApplicationTester($application);

    $tester->run(['command' => 'plaisio:kernel-data-layer-type',
                  'class'   => 'NoSuchVendor\\AwesomeDataLayer1'],
                 ['verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE]);

    $output = $tester->getDisplay();
    self::assertSame(0, $tester->getStatusCode(), $output);

    $xml = file_get_contents('vendor/plaisio/kernel/plaisio-kernel.xml');
    self::assertStringContainsString('\NoSuchVendor\AwesomeDataLayer1', $xml);

    $tester->run(['command' => 'plaisio:kernel-properties'],
                 ['verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE]);

    $output = $tester->getDisplay();
    self::assertSame(0, $tester->getStatusCode(), $output);

    $kernel = file_get_contents('vendor/plaisio/kernel/src/PlaisioKernel.php');
    self::assertStringContainsString('@property-read \NoSuchVendor\AwesomeDataLayer1 $DL The data layer generated by PhpStratum.', $kernel);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * Test set datalayer class using plaisio-stratum.xml.
   */
  public function test04(): void
  {
    $application = new PlaisioApplication();
    $application->setAutoExit(false);
    $tester = new ApplicationTester($application);
    $tester->run(['command' => 'plaisio:kernel-data-layer-type'],
                 ['verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE]);

    $output = $tester->getDisplay();
    self::assertSame(0, $tester->getStatusCode(), $output);

    $xml = file_get_contents('vendor/plaisio/kernel/plaisio-kernel.xml');
    self::assertStringContainsString('\NoSuchVendor\AwesomeDataLayer2', $xml);

    $tester->run(['command' => 'plaisio:kernel-properties'],
                 ['verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE]);

    $output = $tester->getDisplay();
    self::assertSame(0, $tester->getStatusCode(), $output);

    $kernel = file_get_contents('vendor/plaisio/kernel/src/PlaisioKernel.php');
    self::assertStringContainsString('@property-read \NoSuchVendor\AwesomeDataLayer2 $DL The data layer generated by PhpStratum.', $kernel);
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
